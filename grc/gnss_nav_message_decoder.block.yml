id: gnss_nav_message_decoder
label: Nav Message Decoder
category: '[GNSS]'

templates:
  imports: from gnuradio import gnss
  make: |-
    gnss.nav_message_decoder()
    self.${id}.set_acq_params(${navigation_system}, ${identifier})

callbacks:
- self.${id}.set_acq_params(${navigation_system}, ${identifier})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: navigation_system
  label: Navigation System
  dtype: enum
  options: [gnss.NAVIGATION_SYSTEM_UNDEFINED, gnss.NAVIGATION_SYSTEM_GPS, gnss.NAVIGATION_SYSTEM_GALILEO, gnss.NAVIGATION_SYSTEM_GLONASS]
  option_labels: [UNDEFINED, GPS, GALILEO, GLONASS]
  default: gnss.NAVIGATION_SYSTEM_UNDEFINED

- id: identifier
  label: Id (e.g. gps svid)
  dtype: int
  default: -1

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- domain: stream
  label: in
  dtype: byte
  vlen: 1

outputs:
- domain: stream
  label: out
  dtype: f64
  vlen: 3

- domain: message
  id: clock
  optional: true

- domain: message
  id: ephemeris
  optional: true

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
