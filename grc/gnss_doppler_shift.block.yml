id: gnss_doppler_shift
label: Doppler Shift
category: '[GNSS]'

templates:
  imports: from gnuradio import gnss
  make: gnss.doppler_shift(${x}, ${y}, ${z})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: receiver_port
  label: Receiver port
  dtype: bool
  options: [False, True]
  option_labels: [OFF, ON]
  default: 'True'

- id: x
  label: Receiver Position [x]
  dtype: float
  default: 0.0
  hide: ${'none' if (receiver_port == False) else 'all'}

- id: y
  label: Receiver Position [y]
  dtype: float
  default: 0.0
  hide: ${'none' if (receiver_port == False) else 'all'}

- id: z
  label: Receiver Position [z]
  dtype: float
  default: 0.0
  hide: ${'none' if (receiver_port == False) else 'all'}

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: satellite
  dtype: f64
  vlen: 3
  optional: ${receiver_port}

- label: receiver
  dtype: f64
  vlen: 3
  optional: 1

outputs:
- label: f
  dtype: f64

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
