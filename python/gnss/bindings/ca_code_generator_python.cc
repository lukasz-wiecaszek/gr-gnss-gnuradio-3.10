/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ca_code_generator.h)                                       */
/* BINDTOOL_HEADER_FILE_HASH(de1bb742745f2fd7fbd3b37bffe0f9f5)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/gnss/ca_code_generator.h>
#include <ca_code_generator_pydoc.h>

template<typename T>
void bind_ca_code_generator_template(py::module& m, const char* classname)
{
    using ca_code_generator = gr::gnss::ca_code_generator<T>;

    py::class_<ca_code_generator,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<ca_code_generator>>(m, classname, D(ca_code_generator))
        .def(
            py::init(&ca_code_generator::make),
            py::arg("vlen"),
            py::arg("sampling_freq"),
            py::arg("svid"),
            py::arg("domain"),
            D(ca_code_generator,make)
        );
}

void bind_ca_code_generator(py::module& m)
{
    bind_ca_code_generator_template<std::int8_t>(m, "ca_code_generator_s8");
    bind_ca_code_generator_template<std::int16_t>(m, "ca_code_generator_s16");
    bind_ca_code_generator_template<std::int32_t>(m, "ca_code_generator_s32");
    bind_ca_code_generator_template<float>(m, "ca_code_generator_f32");
    bind_ca_code_generator_template<double>(m, "ca_code_generator_f64");
    bind_ca_code_generator_template<std::complex<float>>(m, "ca_code_generator_fc32");
}
