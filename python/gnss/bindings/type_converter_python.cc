/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(type_converter.h)                                          */
/* BINDTOOL_HEADER_FILE_HASH(be65b2cd9fd827c425a6b47f405dbd82)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/gnss/type_converter.h>
#include <type_converter_pydoc.h>

template<typename ITYPE, typename OTYPE>
void bind_type_converter_template(py::module& m, const char* classname)
{
    using type_converter = gr::gnss::type_converter<ITYPE, OTYPE>;

    py::class_<type_converter,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<type_converter>>(m, classname, D(type_converter))
        .def(
            py::init(&type_converter::make),
            py::arg("vlen"),
            D(type_converter,make)
        );
}

void bind_type_converter(py::module& m)
{
    bind_type_converter_template<float, double>(m, "f32_to_f64");
    bind_type_converter_template<double, float>(m, "f64_to_f32");
    bind_type_converter_template<std::complex<float>, std::complex<double>>(m, "fc32_to_fc64");
    bind_type_converter_template<std::complex<double>, std::complex<float>>(m, "fc64_to_fc32");
}







