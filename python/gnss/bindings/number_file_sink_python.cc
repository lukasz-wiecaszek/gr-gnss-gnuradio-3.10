/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(number_file_sink.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(fd0adc6a836aaed5589363c0bbd38745)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/gnss/number_file_sink.h>
#include <number_file_sink_pydoc.h>

template<typename ITYPE>
void bind_number_file_sink_template(py::module& m, const char* classname)
{
    using number_file_sink = gr::gnss::number_file_sink<ITYPE>;

    py::class_<number_file_sink,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<number_file_sink>>(m, classname, D(number_file_sink))
        .def(
            py::init(&number_file_sink::make),
            py::arg("vlen"),
            py::arg("filename"),
            py::arg("delimiter"),
            D(number_file_sink,make)
        );
}

void bind_number_file_sink(py::module& m)
{
    bind_number_file_sink_template<std::int8_t>(m, "number_file_sink_s8");
    bind_number_file_sink_template<std::uint8_t>(m, "number_file_sink_u8");
    bind_number_file_sink_template<std::int16_t>(m, "number_file_sink_s16");
    bind_number_file_sink_template<std::uint16_t>(m, "number_file_sink_u16");
    bind_number_file_sink_template<std::int32_t>(m, "number_file_sink_s32");
    bind_number_file_sink_template<std::uint32_t>(m, "number_file_sink_u32");
    bind_number_file_sink_template<std::int64_t>(m, "number_file_sink_s64");
    bind_number_file_sink_template<std::uint64_t>(m, "number_file_sink_u64");
    bind_number_file_sink_template<float>(m, "number_file_sink_f32");
    bind_number_file_sink_template<double>(m, "number_file_sink_f64");
    bind_number_file_sink_template<std::complex<float>>(m, "number_file_sink_fc32");
    bind_number_file_sink_template<std::complex<double>>(m, "number_file_sink_fc64");
}
